Author: Benel Hirmez

Disclaimer: Please make sure JavaScript is enabled on your browser before as some functionality will not be available if it's disabled.

I've decided to change it up a little bit since the first two weeks. I've made the website more concise and added some additional functionality. For starters, I've decided to use a light gray and blue theme throughout the website to give it a consistent feel and make it look more modern. I also decided to use a layout that looks and runs well on multiple different screen sizes using multiple CSS media queries. The text is easy to read as well since the background is fairly solid (opaque gray). I used a hamburger-style navigation menu that was stored using Vue2 (navList.js). I did that early on because it made my HTML code easier to read and more importantly, a lot easier to update as I added/removed pages since I only had to change it once now. I've included images on all the pages except for the contact me page since that wouldv'e made it too busy in my opinion. All the images have CSS styles applied to them as well to make them fit nicer and look more modern and have alt descriptions to make the website usable for people with disabilities. All the links in the website have been tested and work properly, including the navigation links (on all pages), embedded links, and hyperlinks, etc.

The website also uses many different HTML5 elements as well and all pages have at least one JS file to use (the Vue navigation menu). The Contact page, Games page, About page, Cycling page, and the Home page use additional JS code. These include using JS Promises, JSON files, DOM updates, custom alerts, and API (for the trivia game). If I had more time, I would've used Vue again for headers and footers as well. This would make applying styles and updating the code much easier.

There are multiple examples of the DOM being updated. First would be the Contact Form that has alerts that show up in red if the form was submitted with errors or blanks. The video games table is initially hidden behind a button and once clicked, the DOM is updated to show the table and change the text in the button. This can be reversed as well. The same concept is used for the multimedia content in the Cycling page where the button changes text once the embedded video is displayed and vice versa. Lastly, the Home page uses a trivia game as well that can be started using a button. The DOM is updated to show the game and the button text changes as well once the game is displayed.

All HTML and CSS code has been validated as well and no errors were found.

Extra Credit: The website does include some functionality that includes extra credit. An API is used on the Home page to retrieve data from their database and display it (styled) on my page. Flex and grid are also used in my CSS to make sure the website is smooth on different screen sizes. Same thing but using CSS media queries with multiple different ranges to make sure viewing the website is smooth from phone displays to standard monitor sizes. Lastly, AJAX is also used in triviaGames.js file by utilizing asynchronous functions to make sure the user experience is good even while the page is communicating with the API in the background. AJAX is also utilized by using the JSON file (videoGamesTable.js) to store the data for the Games table.

Viewing the website: The easiest way is to open the provided website URL. The files are also all provided, so the files can be downloaded in an IDE and opened with a Live Server as well. Just make sure your JavaScript is enabled for any browser you launch the website in to make sure all the functionality is available. I also added a <noscript> to each html file to display a warning to the user if they JavaScript disabled.